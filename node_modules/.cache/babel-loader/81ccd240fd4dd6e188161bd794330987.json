{"ast":null,"code":"import _classCallCheck from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\src\\\\App.js\";\nimport React from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\nimport { Route, Redirect, Link } from 'react-router-dom';\nimport SearchLibrary from './SearchLibrary';\nimport Shelf from './Shelf';\n\nvar BooksApp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BooksApp, _React$Component);\n\n  function BooksApp() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BooksApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BooksApp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoaded: false,\n      books: [],\n      currentlyReading: [],\n      wantToRead: [],\n      read: []\n    };\n    return _this;\n  }\n\n  _createClass(BooksApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      BooksAPI.getAll().then(function (response) {\n        return _this2.setState({\n          books: response\n        });\n      }).then(function () {\n        _this2.state.books.forEach(function (book) {\n          switch (book.shelf) {\n            case 'currentlyReading':\n              {\n                _this2.setState(function (currentState) {\n                  return {\n                    currentlyReading: currentState.currentlyReading.concat([book])\n                  };\n                });\n              }\n              break;\n\n            case 'wantToRead':\n              {\n                _this2.setState(function (currentState) {\n                  return {\n                    wantToRead: currentState.wantToRead.concat([book])\n                  };\n                });\n              }\n              break;\n\n            case 'read':\n              {\n                _this2.setState(function (currentState) {\n                  return {\n                    read: currentState.read.concat([book])\n                  };\n                });\n              }\n              break;\n\n            default:\n          }\n        });\n      }, this.setState({\n        isLoaded: true\n      })); // .then(()=>console.log(this.state.currentlyReading))\n    }\n  }, {\n    key: \"addToShelf\",\n    value: function addToShelf(book, shelf) {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if(this.state.isLoaded) \n      // {\n      return React.createElement(\"div\", {\n        className: \"app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-books-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"MyReads\")), React.createElement(\"div\", {\n        className: \"list-books-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, React.createElement(Shelf, {\n        shelf: this.state.currentlyReading,\n        name: 'Currently Reading',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }), React.createElement(Shelf, {\n        shelf: this.state.wantToRead,\n        name: 'Want To Read',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }), React.createElement(Shelf, {\n        shelf: this.state.read,\n        name: 'Read',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), this.state.read[0] !== undefined && console.log(this.state.read[0]))), React.createElement(Link, {\n        to: \"/search\",\n        className: \"open-search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }))); // return (\n      //   <div>\n      //     {console.log('Loading')}\n      //     <p>Loading, please wait</p>\n      //   </div>\n      // );\n    }\n  }]);\n\n  return BooksApp;\n}(React.Component);\n\nexport default BooksApp;\n/**\r\n     * TODO: Instead of using this state variable to keep track of which page\r\n     * we're on, use the URL in the browser's address bar. This will ensure that\r\n     * users can use the browser's back and forward buttons to navigate between\r\n     * pages, as well as provide a good URL they can bookmark and share.\r\n     * \r\n     * () => this.setState({ showSearchPage: true })\r\n     */","map":{"version":3,"sources":["D:\\REACT\\reactnd-project-myreads-starter\\src\\App.js"],"names":["React","BooksAPI","Route","Redirect","Link","SearchLibrary","Shelf","BooksApp","state","isLoaded","books","currentlyReading","wantToRead","read","getAll","then","response","setState","forEach","book","shelf","currentState","concat","undefined","console","log","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport {Route, Redirect, Link} from 'react-router-dom';\r\nimport SearchLibrary from './SearchLibrary';\r\nimport Shelf from './Shelf';\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {  \r\n    isLoaded: false,\r\n    books: [],\r\n    currentlyReading: [],\r\n    wantToRead: [],\r\n    read: []\r\n\r\n  }\r\n  componentDidMount()\r\n  {\r\n    BooksAPI.getAll()\r\n      .then((response)=>this.setState({books:response}))\r\n      .then(()=>{\r\n        this.state.books.forEach((book) => {\r\n          switch(book.shelf)\r\n          {\r\n            case 'currentlyReading': {this.setState(currentState => ({currentlyReading: currentState.currentlyReading.concat([book]) }))}\r\n                                      break;\r\n            case 'wantToRead': {this.setState(currentState => ({wantToRead: currentState.wantToRead.concat([book]) }))}\r\n                                      break;    \r\n            case 'read': {this.setState(currentState => ({read: currentState.read.concat([book]) }))}\r\n                                      break;    \r\n            default:               \r\n          }\r\n        })\r\n      }, this.setState({ isLoaded: true }))\r\n      // .then(()=>console.log(this.state.currentlyReading))\r\n  }\r\n\r\n  \r\n  addToShelf(book, shelf)\r\n  {}\r\n\r\n  render() {\r\n\r\n    // if(this.state.isLoaded) \r\n    // {\r\n      return (\r\n      <div className=\"app\">\r\n          <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                {/* <Route path='/'>\r\n                  \r\n                </Route> */}\r\n                <Shelf shelf={this.state.currentlyReading} name={'Currently Reading'}/>\r\n                <Shelf shelf={this.state.wantToRead} name={'Want To Read'}/>\r\n                <Shelf shelf={this.state.read} name={'Read'}/>\r\n                {this.state.read[0]!==undefined && \r\n                    console.log(this.state.read[0])\r\n                  }\r\n              </div>\r\n            </div>\r\n          \r\n                 <Link to='/search' className=\"open-search\">\r\n                   \r\n                 </Link>\r\n            \r\n          </div>\r\n      </div>\r\n    )\r\n    // return (\r\n    //   <div>\r\n    //     {console.log('Loading')}\r\n    //     <p>Loading, please wait</p>\r\n    //   </div>\r\n    // );\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n\r\n/**\r\n     * TODO: Instead of using this state variable to keep track of which page\r\n     * we're on, use the URL in the browser's address bar. This will ensure that\r\n     * users can use the browser's back and forward buttons to navigate between\r\n     * pages, as well as provide a good URL they can bookmark and share.\r\n     * \r\n     * () => this.setState({ showSearchPage: true })\r\n     */\r\n"]},"metadata":{},"sourceType":"module"}