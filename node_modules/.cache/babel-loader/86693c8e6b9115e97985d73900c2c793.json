{"ast":null,"code":"import _classCallCheck from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\src\\\\App.js\";\nimport React from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\nimport { Route, Redirect, withRouter, Link } from 'react-router-dom';\nimport SearchLibrary from './SearchLibrary';\nimport Shelf from './Shelf';\n\nvar BooksApp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BooksApp, _React$Component);\n\n  function BooksApp() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BooksApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BooksApp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      books: [],\n      currentlyReading: [],\n      wantToRead: [],\n      read: []\n    };\n\n    _this.reRenderScreen = function () {\n      BooksAPI.getAll().then(function (response) {\n        return _this.setState({\n          books: response\n        });\n      }).then(function () {\n        _this.state.books.forEach(function (book) {\n          switch (book.shelf) {\n            case 'currentlyReading':\n              {\n                _this.setState(function (currentState) {\n                  return {\n                    currentlyReading: currentState.currentlyReading.concat([book])\n                  };\n                });\n              }\n              break;\n\n            case 'wantToRead':\n              {\n                _this.setState(function (currentState) {\n                  return {\n                    wantToRead: currentState.wantToRead.concat([book])\n                  };\n                });\n              }\n              break;\n\n            case 'read':\n              {\n                _this.setState(function (currentState) {\n                  return {\n                    read: currentState.read.concat([book])\n                  };\n                });\n              }\n              break;\n\n            default:\n          }\n        });\n      }); // .then(()=>console.log(this.state.currentlyReading))\n    };\n\n    _this.toUpdateShelf = function (book, shelf) {\n      // let bookToBeUpdated=this.state.books.filter(book=>\n      //   book.id===book.id? book.shelf=shelf: '')\n      // let index=this.state.books.indexOf(bookToBeUpdated)\n      // let updatedBooks=this.state.books.splice(index, 0, bookToBeUpdated)\n      // this.setState({books: updatedBooks})\n      // console.log(this.state.books)\n      BooksAPI.update(book, shelf).then(function () {\n        book.shelf = shelf;\n\n        _this.setState(function (currentState) {\n          return {\n            books: currentState.books.filter(function (b) {\n              return b.id !== book.id;\n            }).concat([book])\n          };\n        });\n\n        _this.setState({\n          currentlyReading: [],\n          wantToRead: [],\n          read: []\n        });\n      }); // BooksAPI.getAll().then((respons)=>{this.setState({books:respons})})\n\n      BooksAPI.getAll() // .then((response)=>this.setState({books:response}))\n      .then(_this.reRenderScreen());\n    };\n\n    _this.removeAll = function (shelf) {\n      _this.setState({\n        shelf: []\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(BooksApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.reRenderScreen();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"app\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Route, {\n        exact: true,\n        path: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-books\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"list-books-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"MyReads\")), React.createElement(\"div\", {\n        className: \"list-books-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(Shelf, {\n        shelf: this.state.currentlyReading,\n        currentShelf: 'currentlyReading',\n        name: 'Currently Reading',\n        onShelfUpdate: this.toUpdateShelf,\n        removeAll: this.removeAll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(Shelf, {\n        shelf: this.state.wantToRead,\n        currentShelf: 'wantToRead',\n        name: 'Want To Read',\n        onShelfUpdate: this.toUpdateShelf,\n        removeAll: this.removeAll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(Shelf, {\n        shelf: this.state.read,\n        currentShelf: 'read',\n        name: 'Read',\n        onShelfUpdate: this.toUpdateShelf,\n        removeAll: this.removeAll,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })))), React.createElement(Link, {\n        to: \"/search\",\n        className: \"open-search\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"Add a book\"))), React.createElement(Route, {\n        exact: true,\n        path: \"/search\",\n        render: function render() {\n          return React.createElement(SearchLibrary, {\n            books: _this2.state.books,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return BooksApp;\n}(React.Component);\n\nexport default BooksApp; // export default withRouter(BooksApp)","map":{"version":3,"sources":["D:\\REACT\\reactnd-project-myreads-starter\\src\\App.js"],"names":["React","BooksAPI","Route","Redirect","withRouter","Link","SearchLibrary","Shelf","BooksApp","state","books","currentlyReading","wantToRead","read","reRenderScreen","getAll","then","response","setState","forEach","book","shelf","currentState","concat","toUpdateShelf","update","filter","b","id","removeAll","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport {Route, Redirect, withRouter, Link} from 'react-router-dom';\r\nimport SearchLibrary from './SearchLibrary';\r\nimport Shelf from './Shelf';\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    books: [],\r\n    currentlyReading: [],\r\n    wantToRead: [],\r\n    read: []\r\n  }\r\n  reRenderScreen=()=>\r\n  {\r\n    BooksAPI.getAll()\r\n      .then((response)=>this.setState({books:response}))\r\n      .then(()=>{\r\n        this.state.books.forEach((book) => {\r\n          switch(book.shelf)\r\n          {\r\n            case 'currentlyReading': {this.setState(currentState => ({currentlyReading: currentState.currentlyReading.concat([book]) }))}\r\n                                      break;\r\n            case 'wantToRead': {this.setState(currentState => ({wantToRead: currentState.wantToRead.concat([book]) }))}\r\n                                      break;    \r\n            case 'read': {this.setState(currentState => ({read: currentState.read.concat([book]) }))}\r\n                                      break;    \r\n            default:               \r\n          }\r\n        })\r\n      })\r\n      // .then(()=>console.log(this.state.currentlyReading))\r\n  }\r\n\r\n  componentDidMount()\r\n  {\r\n    this.reRenderScreen();\r\n  }\r\n\r\n  \r\n  toUpdateShelf=(book, shelf)=>\r\n  {\r\n    // let bookToBeUpdated=this.state.books.filter(book=>\r\n    //   book.id===book.id? book.shelf=shelf: '')\r\n    // let index=this.state.books.indexOf(bookToBeUpdated)\r\n    // let updatedBooks=this.state.books.splice(index, 0, bookToBeUpdated)\r\n    // this.setState({books: updatedBooks})\r\n    // console.log(this.state.books)\r\n\r\n    BooksAPI.update(book, shelf)\r\n    .then(()=>{\r\n      book.shelf = shelf;\r\n      this.setState(currentState => ({\r\n        books: currentState.books.filter(b => b.id !== book.id).concat([book])\r\n      }));\r\n      this.setState({\r\n        currentlyReading: [],\r\n        wantToRead: [],\r\n        read: []\r\n        })\r\n      \r\n    })\r\n    // BooksAPI.getAll().then((respons)=>{this.setState({books:respons})})\r\n    BooksAPI.getAll()\r\n      // .then((response)=>this.setState({books:response}))\r\n      .then(this.reRenderScreen())\r\n  }\r\n\r\n  removeAll=(shelf)=>\r\n  {\r\n    this.setState({shelf: []})\r\n  }\r\n\r\n  render() \r\n  {\r\n      return (\r\n      <div className=\"app\">\r\n        <Route exact path='/'>\r\n            <div className=\"list-books\">\r\n              <div className=\"list-books-title\">\r\n                <h1>MyReads</h1>\r\n              </div>\r\n              <div className=\"list-books-content\">\r\n                <div>                 \r\n                    <Shelf shelf={this.state.currentlyReading} currentShelf={'currentlyReading'} name={'Currently Reading'} onShelfUpdate={this.toUpdateShelf} removeAll={this.removeAll}/>\r\n                    <Shelf shelf={this.state.wantToRead} currentShelf={'wantToRead'} name={'Want To Read'} onShelfUpdate={this.toUpdateShelf} removeAll={this.removeAll}/>\r\n                    <Shelf shelf={this.state.read} currentShelf={'read'} name={'Read'} onShelfUpdate={this.toUpdateShelf} removeAll={this.removeAll}/>\r\n                  {/* {this.state.books!==undefined && \r\n                      console.log(this.state.books)\r\n                    } */}\r\n                </div>\r\n              </div>            \r\n            </div>  \r\n            <Link to='/search' className=\"open-search\">\r\n              <button>Add a book</button>\r\n            </Link>            \r\n          </Route>\r\n          <Route exact path='/search' render={()=><SearchLibrary books={this.state.books}/>}/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default BooksApp\r\n// export default withRouter(BooksApp)"]},"metadata":{},"sourceType":"module"}