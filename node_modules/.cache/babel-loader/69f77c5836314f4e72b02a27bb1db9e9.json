{"ast":null,"code":"import _classCallCheck from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\REACT\\\\reactnd-project-myreads-starter\\\\src\\\\App.js\";\nimport React from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css'; // import {Route, Redirect, Link} from 'react-router-dom';\n\nimport SearchLibrary from './SearchLibrary';\nimport Shelf from './Shelf';\n\nvar BooksApp =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BooksApp, _React$Component);\n\n  function BooksApp() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BooksApp);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BooksApp)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoaded: false,\n      books: [],\n      currentlyReading: [],\n      wantToRead: [],\n      read: []\n    };\n    return _this;\n  }\n\n  _createClass(BooksApp, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      BooksAPI.getAll().then(function (response) {\n        return _this2.setState({\n          books: response\n        });\n      }).then(function () {\n        _this2.state.books.forEach(function (book) {\n          switch (book.shelf) {\n            case 'currentlyReading':\n              {\n                _this2.setState(function (currentState) {\n                  return {\n                    currentlyReading: currentState.currentlyReading.concat([book])\n                  };\n                });\n              }\n              break;\n\n            case 'wantToRead':\n              {\n                _this2.state.wantToRead.push({\n                  book: book\n                });\n              }\n              break;\n\n            case 'read':\n              {\n                _this2.state.read.push({\n                  book: book\n                });\n              }\n              break;\n\n            default:\n          }\n        });\n      }, this.setState({\n        isLoaded: true\n      })); // .then(()=>console.log(this.state.currentlyReading))\n    }\n  }, {\n    key: \"addToShelf\",\n    value: function addToShelf(book, shelf) {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.isLoaded) {\n        return React.createElement(\"div\", {\n          className: \"app\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"list-books\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"list-books-title\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        }, \"MyReads\")), React.createElement(\"div\", {\n          className: \"list-books-content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54\n          },\n          __self: this\n        }, React.createElement(Route, {\n          path: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }), console.log(this.state.books[0]['title']))), React.createElement(Link, {\n          to: \"/search\",\n          className: \"open-search\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }, React.createElement(Route, {\n          path: \"/search\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 66\n          },\n          __self: this\n        }, React.createElement(SearchLibrary, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        })))));\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, console.log('Loading'), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, \"Loading, please wait\"));\n    }\n  }]);\n\n  return BooksApp;\n}(React.Component);\n\nexport default BooksApp;\n/**\r\n     * TODO: Instead of using this state variable to keep track of which page\r\n     * we're on, use the URL in the browser's address bar. This will ensure that\r\n     * users can use the browser's back and forward buttons to navigate between\r\n     * pages, as well as provide a good URL they can bookmark and share.\r\n     * \r\n     * () => this.setState({ showSearchPage: true })\r\n     */","map":{"version":3,"sources":["D:\\REACT\\reactnd-project-myreads-starter\\src\\App.js"],"names":["React","BooksAPI","SearchLibrary","Shelf","BooksApp","state","isLoaded","books","currentlyReading","wantToRead","read","getAll","then","response","setState","forEach","book","shelf","currentState","concat","push","console","log","Component"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\n// import {Route, Redirect, Link} from 'react-router-dom';\r\nimport SearchLibrary from './SearchLibrary';\r\nimport Shelf from './Shelf';\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {  \r\n    isLoaded: false,\r\n    books: [],\r\n    currentlyReading: [],\r\n    wantToRead: [],\r\n    read: []\r\n\r\n  }\r\n  componentDidMount()\r\n  {\r\n    BooksAPI.getAll()\r\n      .then((response)=>this.setState({books:response}))\r\n      .then(()=>{\r\n        this.state.books.forEach((book) => {\r\n          switch(book.shelf)\r\n          {\r\n            case 'currentlyReading': \r\n            {this.setState(currentState => ({currentlyReading: currentState.currentlyReading.concat([book]) }))}\r\n                                      break;\r\n            case 'wantToRead': {this.state.wantToRead.push({book})}\r\n                                      break;    \r\n            case 'read': {this.state.read.push({book})}\r\n                                      break;    \r\n            default:               \r\n          }\r\n        })\r\n      }, this.setState({ isLoaded: true }))\r\n      // .then(()=>console.log(this.state.currentlyReading))\r\n  }\r\n\r\n  \r\n  addToShelf(book, shelf)\r\n  {}\r\n\r\n  render() {\r\n\r\n    if(this.state.isLoaded) \r\n    {\r\n      return (\r\n      <div className=\"app\">\r\n          <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            <div className=\"list-books-content\">\r\n              <div>\r\n                <Route path='/'>\r\n                  \r\n                </Route>\r\n                {/* <Shelf shelf={this.state.currentlyReading}/>\r\n                <Shelf shelf={this.state.wantToRead}/>\r\n                <Shelf shelf={this.state.read}/>*/}\r\n                {console.log((this.state.books[0])['title'])} \r\n              </div>\r\n            </div>\r\n          \r\n                 <Link to='/search' className=\"open-search\">\r\n                   <Route path='/search'>\r\n                     <SearchLibrary/>\r\n                   </Route>\r\n                 </Link>\r\n            \r\n          </div>\r\n      </div>\r\n    )}\r\n    return (\r\n      <div>\r\n        {console.log('Loading')}\r\n        <p>Loading, please wait</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n\r\n/**\r\n     * TODO: Instead of using this state variable to keep track of which page\r\n     * we're on, use the URL in the browser's address bar. This will ensure that\r\n     * users can use the browser's back and forward buttons to navigate between\r\n     * pages, as well as provide a good URL they can bookmark and share.\r\n     * \r\n     * () => this.setState({ showSearchPage: true })\r\n     */\r\n"]},"metadata":{},"sourceType":"module"}